VPC (Virtual Private Cloud): VPC allows you to create a virtual network in the AWS cloud where you can launch AWS resources such as EC2 instances, RDS databases, and more. It provides you with control over your virtual networking environment, including selection of your own IP address range, creation of subnets, and configuration of route tables and network gateways.

Subnets: Subnets are subdivisions of a VPC's IP address range where you can place groups of resources. They allow you to segment your network for better organization, security, and resource isolation. Subnets can be public (accessible from the internet) or private (accessible only from within the VPC or via a VPN connection).

Security Groups: Security groups act as virtual firewalls for your EC2 instances, controlling inbound and outbound traffic. You can specify rules to allow traffic based on protocols, ports, and source/destination IP addresses. Security groups are stateful, meaning any traffic allowed in is automatically allowed back out.

S3 Bucket: Amazon S3 (Simple Storage Service) is a scalable object storage service offered by AWS. It allows you to store and retrieve any amount of data from anywhere on the web. An S3 bucket is a container for objects stored in S3. It's the fundamental entity in S3, and you can control access to buckets and objects through bucket policies and access control lists (ACLs).

AWS Load Balancer: AWS offers several types of load balancers, including Application Load Balancer (ALB) and Network Load Balancer (NLB). Load balancers distribute incoming application or network traffic across multiple targets (such as EC2 instances) to ensure optimal resource utilization, fault tolerance, and high availability of your applications.

Target groups: Target Groups are logical groupings of resources that are registered with a load balancer. These resources can be instances, containers, IP addresses, or Lambda functions. When a load balancer receives a request, it forwards the request to one or more targets in the associated target group.

Auto Scaling: Auto Scaling allows you to automatically adjust the number of EC2 instances in your application based on demand or a defined schedule. It helps maintain application availability and ensures you have enough capacity to handle varying workloads. You can define scaling policies based on metrics like CPU utilization, network traffic, or custom metrics.

Launch Template: launch template is a configuration template used by autoscaling groups to launch instances or other resources. It defines parameters such as the instance type, AMI (Amazon Machine Image), key pair, security groups, and other settings required to launch instances. By using launch templates, autoscaling groups can ensure consistency across instances and simplify the process of launching new resources. 

AMI (Amazon Machine Image): An AMI is a pre-configured template used to create EC2 instances. It contains the operating system, application server, and applications required to launch an instance. You can create your own custom AMIs or use pre-built ones provided by AWS or the community.

Key Pair: When you launch an EC2 instance, you can specify a key pair, consisting of a public key and a private key. The public key is stored on the instance, allowing you to securely SSH into the instance using the corresponding private key. Key pairs are used for authentication and secure communication with EC2 instances.

EBS (Elastic Block Store): EBS provides persistent block-level storage volumes for use with EC2 instances. You can attach EBS volumes to instances to provide storage for applications and data. EBS volumes can be created, attached, and detached from instances as needed, and they persist independently from the life of an instance.


Elastic Beanstalk:
  Elastic Beanstalk is a Platform as a Service (PaaS) offering from AWS that makes it easy to deploy, manage, and scale web applications and services developed with popular programming languages and frameworks such as Java, .NET, Node.js, Python, Ruby, Go, and Docker.
How it works: With Elastic Beanstalk, you simply upload your application code, and it automatically handles the deployment, load balancing, auto-scaling, and monitoring of your application.